{"version":3,"file":"static/js/8392.1901b3fe.chunk.js","mappings":"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","sources":["views/base/placeholders/Placeholders.js","views/forms/input-group/InputGroup.js"],"sourcesContent":["import React from 'react'\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCardImage,\n  CCardText,\n  CCardTitle,\n  CCol,\n  CPlaceholder,\n  CRow,\n} from '@coreui/react'\nimport { DocsExample } from 'src/components'\n\nimport ReactImg from 'src/assets/images/react.jpg'\nimport Select from 'src/views/forms/input-group/InputGroup'\n\nconst Placeholders = () => {\n  return (\n    <CRow>\n      <Select></Select>\n    </CRow>\n  )\n}\n\nexport default Placeholders\n","import React, { useContext, useState, useEffect } from 'react';\nimport axios from 'axios';\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CRow,\n  CFormInput,\n  CInputGroup,\n  CFormSelect,\n  CInputGroupText,\n  CModal,\n  CModalBody,\n  CModalFooter,\n  CModalTitle,\n  CModalHeader,\n  CTable,\n  CTableHead,\n  CTableHeaderCell,\n  CTableRow,\n  CTableDataCell\n} from '@coreui/react';\nimport { DocsExample } from 'src/components';\nimport UserContext from 'src/UserContext';\nimport { useNavigate } from 'react-router-dom';\n\nconst CreateEKS = () => {\n  const [clusterName, setClusterName] = useState('');\n  const [clusterVersion, setSelectedVersion] = useState('');\n  const [visible, setVisible] = useState(false);\n  const [clusters, setClusters] = useState([]);\n  const [delModal, setDelModal] = useState(false);\n  const [deleteClusterName, setDeleteClusterName] = useState(''); // Delete işlemi için seçilen clusterName'i tutar\n  const { userID } = useContext(UserContext);\n  let navigate = useNavigate();\n  \n  const handleCreate = () => {\n    const data = {\n      clusterName,\n      clusterVersion,\n    };\n    // Create işlevi\n    axios.post('http://localhost:7070/k8s/createeks/' + userID, data)\n      .then(response => {\n        if (response.status === 200) {\n          setVisible(!visible);\n          return response.json();\n        } else {\n          console.log(\"olmadi\");\n        }\n      })\n      .then(data => {\n        console.log(data);\n      })\n      .catch(error => {\n        console.error(error);\n      });\n  };\n  \n  const handleModal = () => {\n    setVisible(false);\n    navigate('/base/list-groups');\n  };\n\n  const handleDelete = () => {\n    // Delete işlevi\n    const formData = {\n      clusterName: deleteClusterName,\n    };\n    console.log(formData);\n    // Delete isteği burada gerçekleştirilir\n    fetch(`http://localhost:7070/k8s/deleteeks/${userID}`,{\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(formData)\n    })\n      .then(response => {\n        if (response.status === 200) {\n          // İstek başarılı olduysa işlem yapabilirsiniz\n          setDelModal(false)\n          console.log(response)\n        } else {\n          console.log(\"olmadi\");\n        }\n      })\n      .catch(error => {\n        console.error(error);\n      });\n  };\n\n  useEffect(() => {\n    fetch('http://localhost:7070/k8s/geteks/' + userID)\n      .then(response => {\n        if (response.status === 200) {\n          return response.json();\n        } else {\n          throw new Error('Failed to fetch clusters');\n        }\n      })\n      .then(data => {\n        if (data.clusters && Array.isArray(data.clusters)) {\n          setDelModal(false)\n          setClusters(data.clusters);\n        } else {\n          throw new Error('Invalid cluster data');\n        }\n      })\n      .catch(error => {\n        console.error(error);\n      });\n  }, [userID]);\n\n  return (\n    <CRow>\n      <CCol xs={12}>\n        <CCard className=\"mb-4\">\n          <CCardHeader>\n            <strong>Create EKS</strong>\n          </CCardHeader>\n          <CCardBody>\n            <DocsExample href=\"forms/input-group\">\n              <CInputGroup className=\"mb-3\">\n                <CFormInput\n                  placeholder=\"Cluster Name\"\n                  aria-label=\"Cluster Name\"\n                  value={clusterName}\n                  onChange={(e) => setClusterName(e.target.value)}\n                />\n              </CInputGroup>\n              <CInputGroup className=\"mb-3\">\n                <CFormSelect\n                  id=\"inputGroupSelect02\"\n                  value={clusterVersion}\n                  onChange={(e) => setSelectedVersion(e.target.value)}\n                >\n                  <option>Choose your cluster version</option>\n                  <option value=\"1.24\">1.24</option>\n                  <option value=\"1.25\">1.25</option>\n                  <option value=\"1.26\">1.26</option>\n                </CFormSelect>\n                <CInputGroupText\n                  component=\"label\"\n                  htmlFor=\"inputGroupSelect02\"\n                >\n                  Versions\n                </CInputGroupText>\n              </CInputGroup>\n              <CButton onClick={handleCreate}>Create</CButton>\n              <CModal visible={visible} onClose={() => setVisible(false)}>\n                <CModalHeader onClose={() => setVisible(false)}>\n                  <CModalTitle>Successfully</CModalTitle>\n                </CModalHeader>\n                <CModalBody>Database Successfully Created!</CModalBody>\n                <CModalFooter>\n                  <CButton color='secondary' onClick={handleModal}>\n                    Go AWS Database List\n                  </CButton>\n                </CModalFooter>\n              </CModal>\n            </DocsExample>\n          </CCardBody>\n        </CCard>\n      </CCol>\n      <CCol xs={12}>\n        <CCard className=\"mb-4\">\n          <CCardHeader>\n            <strong>Clusters</strong>\n          </CCardHeader>\n          <CCardBody>\n            <CTable>\n              <CTableHead>\n                <CTableRow>\n                  <CTableHeaderCell>Cluster Name</CTableHeaderCell>\n                  <CTableHeaderCell className=\"text-end\">Action</CTableHeaderCell>\n                </CTableRow>\n              </CTableHead>\n              <tbody>\n                {clusters.map((cluster, index) => (\n                  <CTableRow key={index}>\n                    <CTableDataCell>{cluster}</CTableDataCell>\n                    <CTableDataCell className=\"text-end\">\n                      <CButton color=\"danger\" onClick={() => {\n                        setDeleteClusterName(cluster);\n                        setDelModal(true);\n                      }}>\n                        Delete\n                      </CButton>\n                    </CTableDataCell>\n                  </CTableRow>\n                ))}\n              </tbody>\n            </CTable>\n            <CModal visible={delModal} onClose={() => setDelModal(false)}>\n              <CModalHeader onClose={() => setDelModal(false)}>\n                <CModalTitle>Attention</CModalTitle>\n              </CModalHeader>\n              <CModalBody>Do you want to delete your database?</CModalBody>\n              <CModalFooter>\n                <CButton color='danger' onClick={handleDelete}>\n                  Delete\n                </CButton>\n                <CButton color='secondary' onClick={() => setDelModal(false)}>\n                  Cancel\n                </CButton>\n              </CModalFooter>\n            </CModal>\n          </CCardBody>\n        </CCard>\n      </CCol>\n    </CRow>\n  );\n};\n\nexport default CreateEKS;\n"],"names":["_jsx","CRow","children","Select","_useState","useState","_useState2","_slicedToArray","clusterName","setClusterName","_useState3","_useState4","clusterVersion","setSelectedVersion","_useState5","_useState6","visible","setVisible","_useState7","_useState8","clusters","setClusters","_useState9","_useState10","delModal","setDelModal","_useState11","_useState12","deleteClusterName","setDeleteClusterName","userID","useContext","UserContext","navigate","useNavigate","useEffect","fetch","then","response","status","json","Error","data","Array","isArray","catch","error","console","_jsxs","CCol","xs","CCard","className","CCardHeader","CCardBody","DocsExample","href","CInputGroup","CFormInput","placeholder","value","onChange","e","target","CFormSelect","id","CInputGroupText","component","htmlFor","CButton","onClick","axios","log","CModal","onClose","CModalHeader","CModalTitle","CModalBody","CModalFooter","color","CTable","CTableHead","CTableRow","CTableHeaderCell","map","cluster","index","CTableDataCell","formData","concat","method","headers","body","JSON","stringify"],"sourceRoot":""}