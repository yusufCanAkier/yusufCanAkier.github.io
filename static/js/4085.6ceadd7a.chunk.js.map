{"version":3,"file":"static/js/4085.6ceadd7a.chunk.js","mappings":"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","sources":["views/forms/input-group/InputGroup.js"],"sourcesContent":["import React, { useContext, useState, useEffect } from 'react';\nimport axios from 'axios';\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CRow,\n  CFormInput,\n  CInputGroup,\n  CFormSelect,\n  CInputGroupText,\n  CModal,\n  CModalBody,\n  CModalFooter,\n  CModalTitle,\n  CModalHeader,\n  CTable,\n  CTableHead,\n  CTableHeaderCell,\n  CTableRow,\n  CTableDataCell\n} from '@coreui/react';\nimport { DocsExample } from 'src/components';\nimport UserContext from 'src/UserContext';\nimport { useNavigate } from 'react-router-dom';\n\nconst CreateEKS = () => {\n  const [clusterName, setClusterName] = useState('');\n  const [clusterVersion, setSelectedVersion] = useState('');\n  const [visible, setVisible] = useState(false);\n  const [clusters, setClusters] = useState([]);\n  const [delModal, setDelModal] = useState(false);\n  const [deleteClusterName, setDeleteClusterName] = useState(''); // Delete işlemi için seçilen clusterName'i tutar\n  const { userID } = useContext(UserContext);\n  let navigate = useNavigate();\n  \n  const handleCreate = () => {\n    const data = {\n      clusterName,\n      clusterVersion,\n    };\n    // Create işlevi\n    axios.post('http://localhost:7070/k8s/createeks/' + userID, data)\n      .then(response => {\n        if (response.status === 200) {\n          setVisible(!visible);\n          return response.json();\n        } else {\n          console.log(\"olmadi\");\n        }\n      })\n      .then(data => {\n        console.log(data);\n      })\n      .catch(error => {\n        console.error(error);\n      });\n  };\n  \n  const handleModal = () => {\n    setVisible(false);\n    navigate('/base/list-groups');\n  };\n\n  const handleDelete = () => {\n    // Delete işlevi\n    const formData = {\n      clusterName: deleteClusterName,\n    };\n    console.log(formData);\n    // Delete isteği burada gerçekleştirilir\n    fetch(`http://localhost:7070/k8s/deleteeks/${userID}`,{\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(formData)\n    })\n      .then(response => {\n        if (response.status === 200) {\n          // İstek başarılı olduysa işlem yapabilirsiniz\n          setDelModal(false)\n          console.log(response)\n        } else {\n          console.log(\"olmadi\");\n        }\n      })\n      .catch(error => {\n        console.error(error);\n      });\n  };\n\n  useEffect(() => {\n    fetch('http://localhost:7070/k8s/geteks/' + userID)\n      .then(response => {\n        if (response.status === 200) {\n          return response.json();\n        } else {\n          throw new Error('Failed to fetch clusters');\n        }\n      })\n      .then(data => {\n        if (data.clusters && Array.isArray(data.clusters)) {\n          setDelModal(false)\n          setClusters(data.clusters);\n        } else {\n          throw new Error('Invalid cluster data');\n        }\n      })\n      .catch(error => {\n        console.error(error);\n      });\n  }, [userID]);\n\n  return (\n    <CRow>\n      <CCol xs={12}>\n        <CCard className=\"mb-4\">\n          <CCardHeader>\n            <strong>Create EKS</strong>\n          </CCardHeader>\n          <CCardBody>\n            <DocsExample href=\"forms/input-group\">\n              <CInputGroup className=\"mb-3\">\n                <CFormInput\n                  placeholder=\"Cluster Name\"\n                  aria-label=\"Cluster Name\"\n                  value={clusterName}\n                  onChange={(e) => setClusterName(e.target.value)}\n                />\n              </CInputGroup>\n              <CInputGroup className=\"mb-3\">\n                <CFormSelect\n                  id=\"inputGroupSelect02\"\n                  value={clusterVersion}\n                  onChange={(e) => setSelectedVersion(e.target.value)}\n                >\n                  <option>Choose your cluster version</option>\n                  <option value=\"1.24\">1.24</option>\n                  <option value=\"1.25\">1.25</option>\n                  <option value=\"1.26\">1.26</option>\n                </CFormSelect>\n                <CInputGroupText\n                  component=\"label\"\n                  htmlFor=\"inputGroupSelect02\"\n                >\n                  Versions\n                </CInputGroupText>\n              </CInputGroup>\n              <CButton onClick={handleCreate}>Create</CButton>\n              <CModal visible={visible} onClose={() => setVisible(false)}>\n                <CModalHeader onClose={() => setVisible(false)}>\n                  <CModalTitle>Successfully</CModalTitle>\n                </CModalHeader>\n                <CModalBody>Database Successfully Created!</CModalBody>\n                <CModalFooter>\n                  <CButton color='secondary' onClick={handleModal}>\n                    Go AWS Database List\n                  </CButton>\n                </CModalFooter>\n              </CModal>\n            </DocsExample>\n          </CCardBody>\n        </CCard>\n      </CCol>\n      <CCol xs={12}>\n        <CCard className=\"mb-4\">\n          <CCardHeader>\n            <strong>Clusters</strong>\n          </CCardHeader>\n          <CCardBody>\n            <CTable>\n              <CTableHead>\n                <CTableRow>\n                  <CTableHeaderCell>Cluster Name</CTableHeaderCell>\n                  <CTableHeaderCell className=\"text-end\">Action</CTableHeaderCell>\n                </CTableRow>\n              </CTableHead>\n              <tbody>\n                {clusters.map((cluster, index) => (\n                  <CTableRow key={index}>\n                    <CTableDataCell>{cluster}</CTableDataCell>\n                    <CTableDataCell className=\"text-end\">\n                      <CButton color=\"danger\" onClick={() => {\n                        setDeleteClusterName(cluster);\n                        setDelModal(true);\n                      }}>\n                        Delete\n                      </CButton>\n                    </CTableDataCell>\n                  </CTableRow>\n                ))}\n              </tbody>\n            </CTable>\n            <CModal visible={delModal} onClose={() => setDelModal(false)}>\n              <CModalHeader onClose={() => setDelModal(false)}>\n                <CModalTitle>Attention</CModalTitle>\n              </CModalHeader>\n              <CModalBody>Do you want to delete your database?</CModalBody>\n              <CModalFooter>\n                <CButton color='danger' onClick={handleDelete}>\n                  Delete\n                </CButton>\n                <CButton color='secondary' onClick={() => setDelModal(false)}>\n                  Cancel\n                </CButton>\n              </CModalFooter>\n            </CModal>\n          </CCardBody>\n        </CCard>\n      </CCol>\n    </CRow>\n  );\n};\n\nexport default CreateEKS;\n"],"names":["_useState","useState","_useState2","_slicedToArray","clusterName","setClusterName","_useState3","_useState4","clusterVersion","setSelectedVersion","_useState5","_useState6","visible","setVisible","_useState7","_useState8","clusters","setClusters","_useState9","_useState10","delModal","setDelModal","_useState11","_useState12","deleteClusterName","setDeleteClusterName","userID","useContext","UserContext","navigate","useNavigate","useEffect","fetch","then","response","status","json","Error","data","Array","isArray","catch","error","console","_jsxs","CRow","children","_jsx","CCol","xs","CCard","className","CCardHeader","CCardBody","DocsExample","href","CInputGroup","CFormInput","placeholder","value","onChange","e","target","CFormSelect","id","CInputGroupText","component","htmlFor","CButton","onClick","axios","log","CModal","onClose","CModalHeader","CModalTitle","CModalBody","CModalFooter","color","CTable","CTableHead","CTableRow","CTableHeaderCell","map","cluster","index","CTableDataCell","formData","concat","method","headers","body","JSON","stringify"],"sourceRoot":""}