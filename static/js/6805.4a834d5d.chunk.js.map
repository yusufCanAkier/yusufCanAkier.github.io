{"version":3,"file":"static/js/6805.4a834d5d.chunk.js","mappings":";wOAqHA,UApEe,WACb,OACEA,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,UACEC,EAAAA,EAAAA,MAACC,EAAAA,GAAK,CAACC,UAAU,OAAMH,SAAA,EACrBC,EAAAA,EAAAA,MAACG,EAAAA,GAAW,CAAAJ,SAAA,CAAC,6BAEXF,EAAAA,EAAAA,KAACO,EAAAA,GAAQ,CAACC,KAAK,SAEjBR,EAAAA,EAAAA,KAACS,EAAAA,GAAS,CAAAP,UACRF,EAAAA,EAAAA,KAACU,EAAAA,GAAI,CAAAR,UACHC,EAAAA,EAAAA,MAACM,EAAAA,GAAS,CAAAP,SAAA,EACRF,EAAAA,EAAAA,KAAA,KAAAE,SAAG,wYAOHF,EAAAA,EAAAA,KAAA,KAAAE,SAAG,yDACHF,EAAAA,EAAAA,KAAA,KAAAE,SAAG,4YAOHF,EAAAA,EAAAA,KAAA,KAAAE,SAAG,8gBASHF,EAAAA,EAAAA,KAAA,KAAAE,SAAG,+DACHF,EAAAA,EAAAA,KAAA,KAAAE,SAAG,6MAKHF,EAAAA,EAAAA,KAAA,KAAAE,SAAG,iKAIHF,EAAAA,EAAAA,KAAA,KAAAE,SAAG,oNAKHF,EAAAA,EAAAA,KAAA,KAAAE,SAAG,yPAKHF,EAAAA,EAAAA,KAAA,KAAAE,SAAG,mOAWjB,uBCnHA,OAOC,WACA,aAEA,IAAIS,EAAS,CAAC,EAAEC,eAGhB,SAASC,IAGR,IAFA,IAAIC,EAAU,GAELC,EAAI,EAAGA,EAAIC,UAAUC,OAAQF,IAAK,CAC1C,IAAIG,EAAMF,UAAUD,GACpB,GAAKG,EAAL,CAEA,IAAIC,SAAiBD,EAErB,GAAgB,WAAZC,GAAoC,WAAZA,EAC3BL,EAAQM,KAAKF,QACP,GAAIG,MAAMC,QAAQJ,IACxB,GAAIA,EAAID,OAAQ,CACf,IAAIM,EAAQV,EAAWW,MAAM,KAAMN,GAC/BK,GACHT,EAAQM,KAAKG,EAEf,OACM,GAAgB,WAAZJ,EAAsB,CAChC,GAAID,EAAIO,WAAaC,OAAOC,UAAUF,WAAaP,EAAIO,SAASA,WAAWG,SAAS,iBAAkB,CACrGd,EAAQM,KAAKF,EAAIO,YACjB,QACD,CAEA,IAAK,IAAII,KAAOX,EACXP,EAAOmB,KAAKZ,EAAKW,IAAQX,EAAIW,IAChCf,EAAQM,KAAKS,EAGhB,CAxBkB,CAyBnB,CAEA,OAAOf,EAAQiB,KAAK,IACrB,CAEqCC,EAAOC,SAC3CpB,EAAWqB,QAAUrB,EACrBmB,EAAOC,QAAUpB,QAKhB,KAFwB,EAAF,WACtB,OAAOA,CACP,UAFoB,OAEpB,YAIF,CApDA","sources":["views/theme/colors/Colors.js","../node_modules/classnames/index.js"],"sourcesContent":["import PropTypes from 'prop-types'\nimport React, { useEffect, useState, createRef } from 'react'\nimport classNames from 'classnames'\nimport { CRow, CCol, CCard, CCardHeader, CCardBody } from '@coreui/react'\nimport { rgbToHex } from '@coreui/utils'\nimport { DocsLink } from 'src/components'\n\nconst ThemeView = () => {\n  const [color, setColor] = useState('rgb(255, 255, 255)')\n  const ref = createRef()\n\n  useEffect(() => {\n    const el = ref.current.parentNode.firstChild\n    const varColor = window.getComputedStyle(el).getPropertyValue('background-color')\n    setColor(varColor)\n  }, [ref])\n\n  return (\n    <table className=\"table w-100\" ref={ref}>\n      <tbody>\n        <tr>\n          <td className=\"text-medium-emphasis\">HEX:</td>\n          <td className=\"font-weight-bold\">{rgbToHex(color)}</td>\n        </tr>\n        <tr>\n          <td className=\"text-medium-emphasis\">RGB:</td>\n          <td className=\"font-weight-bold\">{color}</td>\n        </tr>\n      </tbody>\n    </table>\n  )\n}\n\nconst ThemeColor = ({ className, children }) => {\n  const classes = classNames(className, 'theme-color w-75 rounded mb-3')\n  return (\n    <CCol xs={12} sm={6} md={4} xl={2} className=\"mb-4\">\n      <div className={classes} style={{ paddingTop: '75%' }}></div>\n      {children}\n      <ThemeView />\n    </CCol>\n  )\n}\n\nThemeColor.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n}\n\nconst Colors = () => {\n  return (\n    <>\n      <CCard className=\"mb-4\">\n        <CCardHeader>\n          About Kubernetes Provider\n          <DocsLink href=\"\" />\n        </CCardHeader>\n        <CCardBody>\n          <CRow>\n            <CCardBody>\n              <p>\n                A Kubernetes cluster is a group of interconnected nodes (virtual or physical\n                machines) used to manage, scale, and deploy containerized applications using\n                Kubernetes, an open-source container orchestration platform. The cluster provides a\n                consistent, centralized environment that helps automate the deployment, scaling, and\n                management of containerized applications across multiple nodes.\n              </p>\n              <p>Kubernetes clusters consist of two main components:</p>\n              <p>\n                Control Plane (Master Node): The control plane is responsible for managing the\n                overall state of the cluster, ensuring that the desired state of the system is\n                maintained. It includes components like the kube-apiserver, etcd datastore,\n                kube-controller-manager, and kube-scheduler. These components work together to\n                orchestrate the various tasks necessary to keep the cluster running smoothly.\n              </p>\n              <p>\n                Worker Nodes: Worker nodes are the machines where containerized applications are\n                deployed, managed, and scaled. Each worker node runs a container runtime (e.g.,\n                Docker) and the Kubernetes agent called the kubelet. The kubelet communicates with\n                the control plane to ensure the right containers are running on each node, and it\n                manages the lifecycle of containers on the worker node. Worker nodes also run the\n                kube-proxy, which is responsible for managing network communication between the\n                containers and external clients.\n              </p>\n              <p>Kubernetes clusters provide a range of benefits, such as:</p>\n              <p>\n                High availability: Kubernetes can detect when a container or node fails and\n                automatically reschedule the affected workloads to other healthy nodes, ensuring\n                that applications remain highly available.\n              </p>\n              <p>\n                Scalability: Kubernetes makes it easy to scale applications by adding or removing\n                containers based on demand, ensuring that resources are used efficiently.\n              </p>\n              <p>\n                Load balancing: Kubernetes can distribute incoming network traffic across multiple\n                containers or nodes, ensuring that no single node becomes a bottleneck and improving\n                the overall performance of the system.\n              </p>\n              <p>\n                Rolling updates and rollbacks: Kubernetes enables you to update applications without\n                downtime by gradually rolling out changes across the cluster. If a problem is\n                detected, it can also automatically roll back the changes to a previous version.\n              </p>\n              <p>\n                Self-healing: Kubernetes can automatically restart failed containers, reschedule\n                them to other nodes, or replace them with new containers, ensuring that applications\n                continue running without manual intervention.\n              </p>\n            </CCardBody>\n          </CRow>\n        </CCardBody>\n      </CCard>\n    </>\n  )\n}\n\nexport default Colors\n","/*!\n\tCopyright (c) 2018 Jed Watson.\n\tLicensed under the MIT License (MIT), see\n\thttp://jedwatson.github.io/classnames\n*/\n/* global define */\n\n(function () {\n\t'use strict';\n\n\tvar hasOwn = {}.hasOwnProperty;\n\tvar nativeCodeString = '[native code]';\n\n\tfunction classNames() {\n\t\tvar classes = [];\n\n\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\tvar arg = arguments[i];\n\t\t\tif (!arg) continue;\n\n\t\t\tvar argType = typeof arg;\n\n\t\t\tif (argType === 'string' || argType === 'number') {\n\t\t\t\tclasses.push(arg);\n\t\t\t} else if (Array.isArray(arg)) {\n\t\t\t\tif (arg.length) {\n\t\t\t\t\tvar inner = classNames.apply(null, arg);\n\t\t\t\t\tif (inner) {\n\t\t\t\t\t\tclasses.push(inner);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (argType === 'object') {\n\t\t\t\tif (arg.toString !== Object.prototype.toString && !arg.toString.toString().includes('[native code]')) {\n\t\t\t\t\tclasses.push(arg.toString());\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tfor (var key in arg) {\n\t\t\t\t\tif (hasOwn.call(arg, key) && arg[key]) {\n\t\t\t\t\t\tclasses.push(key);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn classes.join(' ');\n\t}\n\n\tif (typeof module !== 'undefined' && module.exports) {\n\t\tclassNames.default = classNames;\n\t\tmodule.exports = classNames;\n\t} else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {\n\t\t// register as 'classnames', consistent with npm package name\n\t\tdefine('classnames', [], function () {\n\t\t\treturn classNames;\n\t\t});\n\t} else {\n\t\twindow.classNames = classNames;\n\t}\n}());\n"],"names":["_jsx","_Fragment","children","_jsxs","CCard","className","CCardHeader","DocsLink","href","CCardBody","CRow","hasOwn","hasOwnProperty","classNames","classes","i","arguments","length","arg","argType","push","Array","isArray","inner","apply","toString","Object","prototype","includes","key","call","join","module","exports","default"],"sourceRoot":""}