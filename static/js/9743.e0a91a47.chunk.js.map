{"version":3,"file":"static/js/9743.e0a91a47.chunk.js","mappings":"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","sources":["views/widgets/Widgets.js"],"sourcesContent":["import React, { useContext, useState, useEffect } from 'react';\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CRow,\n  CFormInput,\n  CInputGroup,\n  CModal,\n  CModalBody,\n  CModalFooter,\n  CModalTitle,\n  CModalHeader,\n  CTable,\n  CTableHead,\n  CTableHeaderCell,\n  CTableRow,\n  CTableDataCell\n} from '@coreui/react';\nimport { DocsExample } from 'src/components';\nimport UserContext from 'src/UserContext';\nimport { useNavigate } from 'react-router-dom';\n\nconst Widgets = () => {\n  const { userID } = useContext(UserContext);\n  const navigate = useNavigate();\n  const [storageName, setStorageName] = useState('');\n  const [location, setLocation] = useState('');\n  const [visible, setVisible] = useState(false);\n  const [storageList, setStorageList] = useState([]);\n  const [delModal, setDelModal] = useState(false);\n  const [deleteLocation, setDeleteLocation] = useState('');\n  const [deleteStorage, setDeleteStorage] = useState('');\n\n  const handleCreate = () => {\n    const data = {\n      storageName,\n      location,\n    };\n\n    fetch(`http://localhost:7070/storage/createaws/${userID}`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(data)\n    })\n      .then(response => {\n        if (response.ok) {\n          setVisible(!visible)\n          return response.json();\n        } else {\n          throw new Error('Failed to create storage');\n        }\n      })\n      .then(data => {\n        console.log('Storage created:', data);\n        // İşlem başarılı olduğunda yapılması gereken işlemler buraya gelebilir\n      })\n      .catch(error => {\n        console.error(error);\n      });\n  };\n\n  const handleModal = () => {\n    setVisible(false);\n    navigate('/base/navs');\n  };\n\n  const handleDelete = (storageName, location) => {\n    // Delete işlevi\n    const formData = {\n      location: location,\n      storageName: storageName,\n    };\n    console.log(formData);\n    fetch(`http://localhost:7070/storage/deleteaws/${userID}`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(formData)\n    })\n      .then(response => {\n        if (response.ok) {\n          // İstek başarılı olduysa işlem yapabilirsiniz\n          console.log(\"Storage deleted successfully\");\n        } else {\n          console.log(\"Failed to delete storage\");\n        }\n      })\n      .catch(error => {\n        console.error(error);\n      });\n  };\n  \n  const handleDelModal = () => {\n    handleDelete();\n    setDelModal(false);\n    navigate('/widgets');\n   };\n  useEffect(() => {\n    fetch(`http://localhost:7070/storage/getlistaws/${userID}`)\n      .then(response => {\n        if (response.ok) {\n          return response.json();\n        } else {\n          throw new Error('Failed to fetch storage list');\n        }\n      })\n      .then(data => {\n        setStorageList(data);\n      })\n      .catch(error => {\n        console.error(error);\n      });\n  }, [userID]);\n\n  return (\n    <CRow>\n      <CCol xs={12}>\n        <CCard className=\"mb-4\">\n          <CCardHeader>\n            <strong>Create Storage</strong>\n          </CCardHeader>\n          <CCardBody>\n            <DocsExample href=\"forms/input-group\">\n              <CInputGroup className=\"mb-3\">\n                <CFormInput\n                  placeholder=\"Storage Name\"\n                  aria-label=\"Storage Name\"\n                  value={storageName}\n                  onChange={e => setStorageName(e.target.value)}\n                />\n              </CInputGroup>\n              <CInputGroup className=\"mb-3\">\n                <CFormInput\n                  placeholder=\"Storage Location\"\n                  aria-label=\"Storage Location\"\n                  value={location}\n                  onChange={e => setLocation(e.target.value)}\n                />\n              </CInputGroup>\n              <CButton onClick={handleCreate}>Create</CButton>\n              <CModal visible={visible} onClose={() => setVisible(false)}>\n                <CModalHeader onClose={() => setVisible(false)}>\n                  <CModalTitle>Successfully</CModalTitle>\n                </CModalHeader>\n                <CModalBody>Database Successfully Created !</CModalBody>\n                <CModalFooter>\n                  <CButton color='secondary' onClick={handleModal}>\n                    Go AWS Database List\n                  </CButton>\n                </CModalFooter>\n              </CModal>\n            </DocsExample>\n          </CCardBody>\n        </CCard>\n      </CCol>\n      <CCol xs={12}>\n        <CCard className=\"mb-4\">\n          <CCardHeader>\n            <strong>Storage List</strong>\n          </CCardHeader>\n          <CCardBody>\n            <CTable>\n              <CTableHead>\n                <CTableRow>\n                  <CTableHeaderCell>Creation Date</CTableHeaderCell>\n                  <CTableHeaderCell>Name</CTableHeaderCell>\n                  <CTableHeaderCell className=\"text-end\">Action</CTableHeaderCell>\n                </CTableRow>\n              </CTableHead>\n              <tbody>\n                {storageList.map((storage, index) => (\n                  <CTableRow key={index}>\n                    <CTableDataCell>{storage.CreationDate}</CTableDataCell>\n                    <CTableDataCell>{storage.Name}</CTableDataCell>\n                    <CTableDataCell className=\"text-end\">\n                      <CButton color=\"danger\" onClick={() => {\n                        setDelModal(true);\n                      }}>\n                        Delete\n                      </CButton>\n                      <CModal visible={delModal} onClose={() => setDelModal(false)}>\n                        <CModalHeader onClose={() => setDelModal(false)}>\n                          <CModalTitle>Warning</CModalTitle>\n                        </CModalHeader>\n                        <CModalBody>Do you want to delete your database?</CModalBody>\n                        <CModalFooter>\n                          <CButton color='danger' onClick={() => handleDelete(storage.Name, storage.Location)}>\n                            Delete\n                          </CButton>\n                          <CButton color='secondary' onClick={() => setDelModal(false)}>\n                            Cancel\n                          </CButton>\n                        </CModalFooter>\n                      </CModal>\n                    </CTableDataCell>\n                  </CTableRow>\n                ))}\n              </tbody>\n            </CTable>\n          </CCardBody>\n        </CCard>\n      </CCol>\n    </CRow>\n  );\n};\n\nexport default Widgets;\n"],"names":["userID","useContext","UserContext","navigate","useNavigate","_useState","useState","_useState2","_slicedToArray","storageName","setStorageName","_useState3","_useState4","location","setLocation","_useState5","_useState6","visible","setVisible","_useState7","_useState8","storageList","setStorageList","_useState9","_useState10","delModal","setDelModal","_useState11","_useState12","_useState13","_useState14","handleDelete","formData","console","log","fetch","concat","method","headers","body","JSON","stringify","then","response","ok","catch","error","useEffect","json","Error","data","_jsxs","CRow","children","_jsx","CCol","xs","CCard","className","CCardHeader","CCardBody","DocsExample","href","CInputGroup","CFormInput","placeholder","value","onChange","e","target","CButton","onClick","CModal","onClose","CModalHeader","CModalTitle","CModalBody","CModalFooter","color","CTable","CTableHead","CTableRow","CTableHeaderCell","map","storage","index","CTableDataCell","CreationDate","Name","Location"],"sourceRoot":""}