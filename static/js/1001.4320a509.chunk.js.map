{"version":3,"file":"static/js/1001.4320a509.chunk.js","mappings":"iQAyDA,UA9Ca,WAEX,IAAQA,GAAWC,EAAAA,EAAAA,YAAWC,EAAAA,GAAtBF,OACRG,GAAwBC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA7BI,EAAIF,EAAA,GAAEG,EAAOH,EAAA,GAChBI,EAAS,4CAA8CT,EAmB3D,OAXAU,EAAAA,EAAAA,YAAU,WACRC,MAAMF,GACHG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,MAAM,IAChCF,MAAK,SAAAL,GAAI,OAERA,EAAKQ,KAAI,SAACC,EAAMC,GAAK,OAAAC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAWF,GAAI,IAAEG,GAAIF,EAAQ,GAAC,GAAI,IAExDL,MAAK,SAAAQ,GAAU,OAAIZ,EAAQY,EAAW,IACtCC,OAAM,SAAAC,GAAK,OAAIC,QAAQD,MAAM,SAAUA,EAAM,GAClD,GAAG,KAGDE,EAAAA,EAAAA,KAACC,EAAAA,GAAM,CACLC,MAAOnB,EACPoB,OArBW,CACb,CAAEC,IAAK,OAAQC,KAAM,KAAMC,OAAQ,QACnC,CAAEF,IAAK,eAAgBC,KAAM,KAAKC,OAAQ,iBAC1C,CAAEF,IAAK,KAAMC,KAAM,KAAMC,OAAQ,MAmB/BC,aAAW,EACXC,oBAAkB,EAClBC,aAAc,EACdC,OAAK,EACLC,QAAM,EACNC,YAAU,EACVC,UAAU,eAAcC,UAExBd,EAAAA,EAAAA,KAACe,EAAAA,EAAU,CAAAD,UACbE,EAAAA,EAAAA,MAACC,EAAAA,GAAS,CAAAH,SAAA,EACRd,EAAAA,EAAAA,KAACkB,EAAAA,GAAgB,CAACC,MAAM,MAAKL,SAAC,UAC9Bd,EAAAA,EAAAA,KAACkB,EAAAA,GAAgB,CAACC,MAAM,MAAKL,SAAC,mBAC9Bd,EAAAA,EAAAA,KAACkB,EAAAA,GAAgB,CAACC,MAAM,MAAKL,SAAC,YAKpC,C","sources":["views/base/navs/Navs.js"],"sourcesContent":["import React, { useContext, useState, useEffect } from 'react'\nimport {\n  CTable,\n  CTableHead,\n  CTableHeaderCell,\n  CTableRow,\n} from '@coreui/react'\nimport UserContext from 'src/UserContext'\nimport '../accordion/accordion-style.css'\n\n\nconst Navs = () => {\n\n  const { userID } = useContext(UserContext)\n  const [data, setData] = useState([]);\n  let apiUrl = 'http://localhost:7070/storage/getlistaws/' + userID\n  const fields = [\n    { key: 'name', _tag: 'th', header: 'Name' },\n    { key: 'creationDate', _tag: 'th',header: 'Creation Date' },\n    { key: 'id', _tag: 'td', header: '#' },\n    \n    \n  ];\n  useEffect(() => {\n    fetch(apiUrl)\n      .then(response => response.json())\n      .then(data => \n        // Her veri öğesine bir id özelliği ekleyin\n        data.map((item, index) => ({ ...item, id: index + 1 }))\n      )\n      .then(dataWithID => setData(dataWithID))\n      .catch(error => console.error('Error:', error));\n  }, []);\n\n  return (\n    <CTable\n      items={data}\n      fields={fields}\n      tableFilter\n      itemsPerPageSelect\n      itemsPerPage={5}\n      hover\n      sorter\n      pagination\n      className='styled-table'\n    >\n      <CTableHead>\n    <CTableRow>\n      <CTableHeaderCell scope=\"col\">Name</CTableHeaderCell>\n      <CTableHeaderCell scope=\"col\">Creation Date</CTableHeaderCell>\n      <CTableHeaderCell scope=\"col\">#</CTableHeaderCell>\n    </CTableRow>\n  </CTableHead>\n    </CTable>\n  )\n}\n\nexport default Navs\n"],"names":["userID","useContext","UserContext","_useState","useState","_useState2","_slicedToArray","data","setData","apiUrl","useEffect","fetch","then","response","json","map","item","index","_objectSpread","id","dataWithID","catch","error","console","_jsx","CTable","items","fields","key","_tag","header","tableFilter","itemsPerPageSelect","itemsPerPage","hover","sorter","pagination","className","children","CTableHead","_jsxs","CTableRow","CTableHeaderCell","scope"],"sourceRoot":""}